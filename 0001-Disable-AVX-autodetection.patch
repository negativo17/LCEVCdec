From a48b39da6f0472f0bdcbd4722b22077850e39a10 Mon Sep 17 00:00:00 2001
From: Simone Caronni <negativo17@gmail.com>
Date: Mon, 8 Sep 2025 11:29:20 +0200
Subject: [PATCH] Disable AVX autodetection

---
 cmake/modules/Compiler/ClangApple.cmake |  4 +++-
 cmake/modules/Compiler/ClangGNU.cmake   |  4 +++-
 cmake/modules/Compiler/GNU.cmake        |  4 +++-
 cmake/modules/Compiler/MSVC.cmake       |  4 +++-
 src/legacy/decoder/src/common/simd.c    | 24 ++++++++++++------------
 5 files changed, 24 insertions(+), 16 deletions(-)

diff --git a/cmake/modules/Compiler/ClangApple.cmake b/cmake/modules/Compiler/ClangApple.cmake
index 5a5d55b..ef72d76 100644
--- a/cmake/modules/Compiler/ClangApple.cmake
+++ b/cmake/modules/Compiler/ClangApple.cmake
@@ -12,8 +12,10 @@
 # ANY ONWARD DISTRIBUTION, WHETHER STAND-ALONE OR AS PART OF ANY OTHER PROJECT, REMAINS SUBJECT TO
 # THE EXCLUSION OF PATENT LICENSES PROVISION OF THE BSD-3-CLAUSE-CLEAR LICENSE.
 
+# SSE4.1 support is enabled for SSE intrinsics, but AVX is detected at runtime
+# This preserves compatibility with x86_64 v1 systems while enabling SSE optimizations
 if (VN_SDK_SIMD AND TARGET_ARCH MATCHES "^x86")
-    target_compile_options(lcevc_dec::compiler INTERFACE -mavx)
+    target_compile_options(lcevc_dec::compiler INTERFACE -msse4.1)
 endif ()
 
 target_compile_options(
diff --git a/cmake/modules/Compiler/ClangGNU.cmake b/cmake/modules/Compiler/ClangGNU.cmake
index 40cfc0f..cc008b5 100644
--- a/cmake/modules/Compiler/ClangGNU.cmake
+++ b/cmake/modules/Compiler/ClangGNU.cmake
@@ -12,8 +12,10 @@
 # ANY ONWARD DISTRIBUTION, WHETHER STAND-ALONE OR AS PART OF ANY OTHER PROJECT, REMAINS SUBJECT TO
 # THE EXCLUSION OF PATENT LICENSES PROVISION OF THE BSD-3-CLAUSE-CLEAR LICENSE.
 
+# SSE4.1 support is enabled for SSE intrinsics, but AVX is detected at runtime
+# This preserves compatibility with x86_64 v1 systems while enabling SSE optimizations
 if (VN_SDK_SIMD AND TARGET_ARCH MATCHES "^x86")
-    target_compile_options(lcevc_dec::compiler INTERFACE -mavx)
+    target_compile_options(lcevc_dec::compiler INTERFACE -msse4.1)
 endif ()
 
 if (TARGET_ARCH STREQUAL "wasm")
diff --git a/cmake/modules/Compiler/GNU.cmake b/cmake/modules/Compiler/GNU.cmake
index 7eb3e1d..a25a271 100644
--- a/cmake/modules/Compiler/GNU.cmake
+++ b/cmake/modules/Compiler/GNU.cmake
@@ -12,8 +12,10 @@
 # ANY ONWARD DISTRIBUTION, WHETHER STAND-ALONE OR AS PART OF ANY OTHER PROJECT, REMAINS SUBJECT TO
 # THE EXCLUSION OF PATENT LICENSES PROVISION OF THE BSD-3-CLAUSE-CLEAR LICENSE.
 
+# SSE4.1 support is enabled for SSE intrinsics, but AVX is detected at runtime
+# This preserves compatibility with x86_64 v1 systems while enabling SSE optimizations
 if (VN_SDK_SIMD AND TARGET_ARCH MATCHES "^x86")
-    target_compile_options(lcevc_dec::compiler INTERFACE -mavx)
+    target_compile_options(lcevc_dec::compiler INTERFACE -msse4.1)
 endif ()
 
 if (VN_SDK_COVERAGE)
diff --git a/cmake/modules/Compiler/MSVC.cmake b/cmake/modules/Compiler/MSVC.cmake
index 1897b44..8afed5e 100644
--- a/cmake/modules/Compiler/MSVC.cmake
+++ b/cmake/modules/Compiler/MSVC.cmake
@@ -12,8 +12,10 @@
 # ANY ONWARD DISTRIBUTION, WHETHER STAND-ALONE OR AS PART OF ANY OTHER PROJECT, REMAINS SUBJECT TO
 # THE EXCLUSION OF PATENT LICENSES PROVISION OF THE BSD-3-CLAUSE-CLEAR LICENSE.
 
+# SSE4.1 support is enabled for SSE intrinsics, but AVX is detected at runtime
+# This preserves compatibility with x86_64 v1 systems while enabling SSE optimizations
 if (VN_SDK_SIMD AND TARGET_ARCH MATCHES "^x86")
-    target_compile_options(lcevc_dec::compiler INTERFACE /arch:AVX)
+    target_compile_options(lcevc_dec::compiler INTERFACE /arch:SSE2)
 endif ()
 
 target_compile_definitions(
diff --git a/src/legacy/decoder/src/common/simd.c b/src/legacy/decoder/src/common/simd.c
index b3e35aa..4e8c573 100644
--- a/src/legacy/decoder/src/common/simd.c
+++ b/src/legacy/decoder/src/common/simd.c
@@ -73,17 +73,8 @@ static CPUAccelerationFeatures_t detectAVX2Feature(const int32_t cpuInfo[4])
     static const int32_t kAVX2Flag = 1 << 5;
     static const int32_t kXSaveFlag = 1 << 27;
 
-    bool hasXSaveSupport = false;
-
-    /* Check for XSAVE support on the OS. */
-    if ((cpuInfo[2] & kXSaveFlag) == kXSaveFlag) {
-        static const uint32_t kOSXSaveMask = 6;
-        static const uint32_t kControlRegister = 0; /* _XCR_XFEATURE_ENABLED_MASK */
-        hasXSaveSupport = ((_xgetbv(kControlRegister) & kOSXSaveMask) == kOSXSaveMask);
-    }
-
-    /* Must have xsave feature and OS must support it. */
-    if (!hasXSaveSupport) {
+    /* Check for XSAVE support on the CPU. */
+    if ((cpuInfo[2] & kXSaveFlag) != kXSaveFlag) {
         return CAFNone;
     }
 
@@ -91,7 +82,16 @@ static CPUAccelerationFeatures_t detectAVX2Feature(const int32_t cpuInfo[4])
     int32_t info[4];
     loadCPUInfo(info, 7);
 
-    return ((info[1] & kAVX2Flag) == kAVX2Flag) ? CAFAVX2 : CAFNone;
+    /* Check if CPU supports AVX2. */
+    if ((info[1] & kAVX2Flag) != kAVX2Flag) {
+        return CAFNone;
+    }
+
+    /* For runtime detection without AVX compilation flags, we assume OS support
+     * if the CPU supports XSAVE and AVX2. This is a reasonable assumption for
+     * modern systems. The actual OS support check with _xgetbv would require
+     * AVX compilation flags, which we avoid to maintain x86_64 v1 compatibility. */
+    return CAFAVX2;
 #else
     /* vndk does not define _xgetbv */
     return CAFNone;
-- 
2.51.0

